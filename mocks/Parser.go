// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	io "io"
	domain "me/coutcout/covoiturage/domain"

	mock "github.com/stretchr/testify/mock"

	zap "go.uber.org/zap"
)

// Parser is an autogenerated mock type for the Parser type
type Parser struct {
	mock.Mock
}

// Parse provides a mock function with given fields: logger, reader, journeyChan
func (_m *Parser) Parse(logger *zap.SugaredLogger, reader io.Reader, journeyChan chan<- *domain.Journey) error {
	ret := _m.Called(logger, reader, journeyChan)

	var r0 error
	if rf, ok := ret.Get(0).(func(*zap.SugaredLogger, io.Reader, chan<- *domain.Journey) error); ok {
		r0 = rf(logger, reader, journeyChan)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewParser interface {
	mock.TestingT
	Cleanup(func())
}

// NewParser creates a new instance of Parser. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewParser(t mockConstructorTestingTNewParser) *Parser {
	mock := &Parser{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
